import "Standard/Units/Time";

utility Units {
	object Distance;
	
	/%
	Stores a distance, distance unit, time, and time unit.
	%/
	object Velocity {
		double dist = 0d;
		int dUnit = -1;
		double time = 0d;
		int tUnit = -1;
		
		/%
		Returns the distance an object with this velocity will travel in the given time.
		
		@"inTime": The amount of time to travel.
		@"inUnit": The unit of @"inTime".
		%/
		func Distance in(double inTime, int inUnit) {
			double seconds = Units.inSeconds(inTime, inUnit);
			double thisTime = Units.inSeconds(time, tUnit);
			double distInSecond = dist / thisTime; 
			
			auto me = new Distance;
			
			me.value = distInSecond * seconds;
			me.unit = dUnit;
			
			ret me;
		}
		
		/%
		Returns the time it will take an object to travel the given distance.

		@"inDist": The distance to travel.
		@"inUnit": The unit of @"inDist".
		%/
		func Time timeFor(double inDist, int inUnit) {
			double distance = Units.inMeters(inDist, inUnit);
			double thisTime = Units.inSeconds(time, tUnit);
			double distInSecond = Units.inMeters(dist / thisTime, dUnit); 
			
			auto me = new Time;
			
			me.value = Units.secondsTo(distance / distInSecond, tUnit);
			me.unit = tUnit;
			
			ret me;
		}
	}
}

// Compensate for forward declaration
import "Standard/Units/Distance";