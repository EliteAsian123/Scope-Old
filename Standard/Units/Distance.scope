import "Standard/Units/Time";
import "Standard/Units/Velocity";

utility Units {
	// Metric
	
	int PICOMETERS = 0;
	int NANOMETERS = 1;
	int MICROMETERS = 2;
	int MILLIMETERS = 3;
	int CENTIMETERS = 4;
	int DECIMETERS = 5;
	int METERS = 6;
	int DECAMETERS = 7;
	int HECTOMETERS = 8;
	int KILOMETERS = 9;
	
	// Imperial

	int POINTS = 10; 
	int PICAS = 11;
	int INCHES = 12;
	int FEET = 13;
	int YARDS = 14;
	int MILES = 15;
	
	/%
	Corresponding units in meters.
	%/
	double[] IN_METERS = new double[] {
		10d ^ -12d, // pm
		10d ^ -9d, // nm
		10d ^ -6d, // um
		10d ^ -3d, // mm
		10d ^ -2d, // cm
		10d ^ -1d, // dm
		10d ^  0d, // m
		10d ^  1d, // dam
		10d ^  2d, // hm
		10d ^  3d, // km

		0.00035277777777778d, // point
		0.00423333333333333d, // pica
		0.0254d, // inch
		0.3048d, // foot
		0.9144d, // yard
		1609.344d // mile
	};
	
	/%
	Stores a value and a unit for distance.
	%/
	object Distance {
		double value = 0d;
		int unit = -1;
		
		/%
		Get the value of the distance in the unit it is stored in.
		@"value" can also be used.
		%/
		func double get() {
			ret value;
		}
		
		/%
		Convert this distance object to another with a new unit.

		@"newUnit": The unit you want to convert to.
		%/
		func Distance to(int newUnit) {
			auto me = new Distance;
			me.value = Units.metersTo(Units.inMeters(value, unit), newUnit);
			me.unit = newUnit;
			ret me;
		}
		
		/%
		Combine two distances together. Example: 5 feet and 10 inches.
		
		@"otherDist": The distance you want to add.
		@"otherUnit": The unit of @"otherDist".
		%/
		func Distance and(double otherDist, int otherUnit) {
			auto me = new Distance;
			
			double thisMeters = Units.inMeters(value, unit);
			double otherMeters = Units.inMeters(otherDist, otherUnit);
			me.value = Units.metersTo(thisMeters + otherMeters, unit);
			me.unit = unit;
			
			ret me;
		}
		
		/%
		Convert this distance along with a time to a velocity.

		@"time": The time it took to travel this distance.
		@"u": The unit of @"time".
		%/
		func Velocity per(double time, int u) {
			auto me = new Velocity;
			
			me.dist = value;
			me.dUnit = unit;
			me.time = time;
			me.tUnit = u;
			
			ret me;
		}
	}
	
	/%
	Creates a distance object.
	%/
	func Distance distance(double dist, int unit) {
		auto me = new Distance;
		me.value = dist;
		me.unit = unit;
		ret me;
	}
	
	/%
	Distance and unit in meters.
	%/
	func double inMeters(double dist, int unit) {
		ret dist * Units.IN_METERS[unit];
	}
	
	/%
	Meters to a distance with the specified units.
	%/
	func double metersTo(double meters, int newUnit) {
		ret meters / Units.IN_METERS[newUnit];
	}
}